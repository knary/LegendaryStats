plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.3"
	id 'jacoco'
	id 'org.siouan.frontend-jdk11' version '5.3.0'
}

group = 'kon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'com.google.guava:guava:30.1.1-jre'

	implementation 'org.tinylog:tinylog-api:2.3.2'
	runtimeOnly 'org.tinylog:tinylog-impl:2.3.2'

	runtimeOnly 'org.flywaydb:flyway-core:7.14.0'

	runtimeOnly 'com.h2database:h2:1.4.200'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation "org.mockito:mockito-core:3.11.2"
	//Needed for Mokito to work with Java 16, see if it is still needed in the future.
	testImplementation "net.bytebuddy:byte-buddy:1.11.12"

	testImplementation 'com.openpojo:openpojo:0.9.1'

	//Needed for Eclipse JUnit runner, see if it is still needed in the future.
	testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.2"
}

test {
	useJUnitPlatform()
}

frontend {
	nodeDistributionProvided = false
	nodeVersion = '14.16.1'
}

sonarqube {
  properties {
    property "sonar.projectKey", "knary_LegendaryStats"
    property "sonar.organization", "kon"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.sources", "src/main/java,src/main/resources/templates,src/main/resources/static/scripts/,src/main/resources/static/styles/"
  }
}

jacocoTestReport {
    dependsOn test
    reports {
    	html.required = true
    	xml.required = true
	}
}

task javascriptCopy(type: Copy) {
	dependsOn installFrontend

	inputs.files(fileTree('node_modules'))

	from 'node_modules'

	include '*/dist/*.js'

	eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = fileCopyDetails.name
    }

    into 'build/resources/main/static/scripts'

    outputs.files(fileTree('build/resources/main/static/scripts'))
}

task cssCopy(type: Copy) {
	dependsOn installFrontend

	inputs.files(fileTree('node_modules'))
	from '.'

	include 'node_modules/*/*.css'

	eachFile { fileCopyDetails ->
        fileCopyDetails.path = fileCopyDetails.name
    }

    into 'build/resources/main/static/styles'

    outputs.files(fileTree('build/resources/main/static/styles'))
}

task copyFromNpm(type: Task) {
	dependsOn javascriptCopy
	dependsOn cssCopy

	inputs.files(fileTree('node_modules'))
}

jar.configure {
	dependsOn tasks.copyFromNpm
}

bootJarMainClassName.configure {
	dependsOn tasks.copyFromNpm
}

bootRunMainClassName.configure {
	dependsOn tasks.copyFromNpm
}

compileTestJava.configure {
	dependsOn tasks.copyFromNpm
}
